#!/usr/bin/env python
#-*-coding:utf-8-*-

from  imp import find_module, load_module

class Core(object):
    def __init__(self):
        self.exploits = {}
        self.payloads = {}
        self.current_exploit = ""
        self.current_payload = ""
        self.current_options = {}
        self.exploit_path = "app/exploits"
        self.payload_path = "app/payloads"

    def load_payload(self):
        return
    def load_exploit(self, exploit_name):
        if exploit_name not in self.exploits:
            exploit = self.find_exploit(exploit_name)
            # exploit模块不存在
            if not exploit:
                return False
            # 加载app目录下的exploit文件
            # print(load_module(exploit["name"], *find_module(exploit["module"], [exploit["path"]])))
            try:
                exploit_module = load_module(exploit["name"], *find_module(exploit["module"], [exploit["path"]]))
            except Exception as e:
                print(str(e))
                return False
            # exploit的配置信息
            self.exploits[exploit_name] = exploit_module

        self.current_exploit = exploit_name

    def show_option(self):
        if not self.exploits:
            return False;
        if not self.current_exploit:
            return False;
        module = self.exploits[self.current_exploit]
        return module.options

    def set_option(self, options):
        if len(options) != 2:
            return self.show_option()
        else:
            option_name = options[0]
            option_value = options[1]

            module = self.exploits[self.current_exploit]
            for opt in module.options:
                if opt == option_name:
                    module_option_dict = dict()
                    module_option_dict["example"] = module.options[opt]
                    module_option_dict["current_value"] = option_value
                    # 参数数据结构转换字典
                    module.options[opt] = module_option_dict
                    return True
            return "option_name not exists!"

    def run_exploit(self):
        # 调用exploit模块
        module = self.exploits[self.current_exploit]

        # 设置参数
        options = module.options

        try:
            return module.exploit(options)
        except:
            pass

    def run_payload(self):
        return

    def show_exploit(self):
        return self.exploits[self.current_exploit]

    def show_payload(self):
        return self.payloads[self.current_payload]

    # 数据库查询
    def find_exploit(self, exploit):
        # 采用"/"分割模块
        if not exploit.find("/"):
            exploit_name = exploit
        else:
            exploit_name = (exploit.split("/"))[-1]

        module = {"name":exploit_name, "module":exploit, "path":self.exploit_path}

        return module

    #数据库查询
    def find_payload(self, payload):
        return
